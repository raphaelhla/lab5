package saga;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class FornecedorTest {

	private Fornecedor fornecedor1, fornecedor2, fornecedor3;

	@BeforeEach
	public void criandoFornecedor() {
		fornecedor1 = new Fornecedor("Seu Olavo", "olavo@gmail.com", "83 99348-1092");
		fornecedor2 = new Fornecedor("Raphael", "raphael@gmail.com", "83 98737-2109");
		fornecedor3 = new Fornecedor("Dona Alba", "alba@gmail.com", "83 99945-1294");
	}

	@Test
	public void testCadastraFornecedorNomeNulo() {
		try {
			new Fornecedor(null, "olavo@gmail.com", "83 99348-1092");
		} catch (NullPointerException e) {
			assertEquals("Erro no cadastro do fornecedor: nome nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraFornecedorNomeVazio() {
		try {
			new Fornecedor("", "olavo@gmail.com", "83 99348-1092");
		} catch (IllegalArgumentException e) {
			assertEquals("Erro no cadastro do fornecedor: nome nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraFornecedorEmailNulo() {
		try {
			new Fornecedor("Seu Olavo", null, "83 99348-1092");
		} catch (NullPointerException e) {
			assertEquals("Erro no cadastro do fornecedor: email nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraFornecedorEmailVazio() {
		try {
			new Fornecedor("Seu Olavo", "", "83 99348-1092");
		} catch (IllegalArgumentException e) {
			assertEquals("Erro no cadastro do fornecedor: email nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraFornecedorTelefoneNulo() {
		try {
			new Fornecedor("Seu Olavo", "olavo@gmail.com", null);
		} catch (NullPointerException e) {
			assertEquals("Erro no cadastro do fornecedor: telefone nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraFornecedorTelefoneVazio() {
		try {
			new Fornecedor("Seu Olavo", "olavo@gmail.com", "");
		} catch (IllegalArgumentException e) {
			assertEquals("Erro no cadastro do fornecedor: telefone nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testGetEmailFornecedor() {
		assertEquals("olavo@gmail.com", fornecedor1.getEmail());
	}
	
	@Test
	public void testGetEmailFornecedor2() {
		assertEquals("raphael@gmail.com", fornecedor2.getEmail());
	}
	
	@Test
	public void testGetTelefoneFornecedor() {
		assertEquals("83 99348-1092", fornecedor1.getTelefone());
	}
	
	@Test
	public void testGetTelefoneFornecedor2() {
		assertEquals("83 98737-2109", fornecedor2.getTelefone());
	}
	
	@Test
	public void testGetNomeFornecedor() {
		assertEquals("Seu Olavo", fornecedor1.getNome());
	}
	
	@Test
	public void testGetNomeFornecedor2() {
		assertEquals("Dona Alba", fornecedor3.getNome());
	}
	
	@Test
	public void testSetEmailFornecedor() {
		fornecedor1.setEmail("olavinho@gmail.com");
		assertEquals("olavinho@gmail.com", fornecedor1.getEmail());
	}
	
	@Test
	public void testSetTelefoneFornecedor() {
		fornecedor3.setTelefone("83 99999-9999");
		assertEquals("83 99999-9999", fornecedor3.getTelefone());
	}
	
	@Test
	public void testHashCode() {
		assertNotEquals(fornecedor1.hashCode(), fornecedor2.hashCode());
	}
	
	@Test
	public void testHashCode2() {
		Fornecedor f4 = new Fornecedor("Seu Olavo", "irineu@gmail.com", "333333333");
		assertEquals(fornecedor1.hashCode(), f4.hashCode());
	}
	
	@Test
	public void testEqualsFornecedorMesmoNome() {
		Fornecedor f4 = new Fornecedor("Seu Olavo", "irineu@gmail.com", "333333333");
		assertTrue(fornecedor1.equals(f4));
	}
	
	@Test
	public void testEqualsFornecedorDiferente() {
		assertFalse(fornecedor1.equals(fornecedor2));
	}
	
	@Test
	public void testEqualsFornecedorComOutraClasse() {
		Cliente cliente = new Cliente("Raphael Agra", "12345678900", "raphael.agra@ccc.ufcg.edu.br", "CAA");
		assertFalse(fornecedor1.equals(cliente));
	}
	
	@Test
	public void testEqualsComNull() {
		assertFalse(fornecedor1.equals(null));
	}
	
	@Test
	public void testEqualsComEleMesmo() {
		assertTrue(fornecedor1.equals(fornecedor1));
	}
	
	@Test
	public void testFornecedorToString() {
		assertEquals("Seu Olavo - olavo@gmail.com - 83 99348-1092", fornecedor1.toString());
	}
}

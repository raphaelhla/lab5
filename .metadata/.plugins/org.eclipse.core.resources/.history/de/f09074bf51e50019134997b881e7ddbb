package saga;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class ProdutoTest {

	private Produto p1,p2,p3;

	@BeforeEach
	public void criaProdutos() {
		p1 = new Produto(5.00, "Cachorro quente", "Pao com salsicha e carne moida");
		p2 = new Produto(3.50, "Tapioca", "Tapioca com frango");
		p3 = new Produto(7.00, "X-tudo", "Hamburguer de carne e frango com queijo e calabresa");
	}
	
	@Test
	public void testCadastraProdutoNomeNulo() {
		try {
			new Produto(5.00, null, "Pao com salsicha e carne moida");
			fail("Deveria lancar excecao");
		} catch (NullPointerException e) {
			assertEquals("Erro no cadastro de produto: nome nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraProdutoNomeVazio() {
		try {
			new Produto(5.00, "", "Pao com salsicha e carne moida");
			fail("Deveria lancar excecao");
		} catch (IllegalArgumentException e) {
			assertEquals("Erro no cadastro de produto: nome nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraProdutoDescricaoNula() {
		try {
			new Produto(5.00, "Cachorro quente", null);
			fail("Deveria lancar excecao");
		} catch (NullPointerException e) {
			assertEquals("Erro no cadastro de produto: descricao nao pode ser vazia ou nula.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraProdutoDescricaoVazia() {
		try {
			new Produto(5.00, "Cachorro quente", "");
			fail("Deveria lancar excecao");
		} catch (IllegalArgumentException e) {
			assertEquals("Erro no cadastro de produto: descricao nao pode ser vazia ou nula.", e.getMessage());
		}
	}
}

package saga;

import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class FornecedorControllerTest {

	private FornecedorController fornecedorController;
	
	@BeforeEach
	public void criaController() {
		fornecedorController = new FornecedorController();
	}
	
	@Test
	public void testCadastraFornecedorValido() {
		assertEquals("Seu Olavo", fornecedorController.cadastraFornecedor("Seu Olavo", "olavo@gmail.com", "83 99999-8888"));
	}

	@Test
	public void testCadastraFornecedorExistente() {
		try {
			fornecedorController.cadastraFornecedor("Seu Olavo", "olavo@gmail.com", "83 99348-1092");
			fornecedorController.cadastraFornecedor("Seu Olavo", "olavo@gmail.com", "83 99348-1092");
			fail("Deveria lancar excecao.");
		} catch (IllegalArgumentException e) {
			assertEquals("Erro no cadastro de fornecedor: fornecedor ja existe.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraFornecedorNomeNulo() {
		try {
			fornecedorController.cadastraFornecedor(null, "olavo@gmail.com", "83 99348-1092");
			fail("Deveria lancar excecao.");
		} catch (NullPointerException e) {
			assertEquals("Erro no cadastro do fornecedor: nome nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraFornecedorNomeVazio() {
		try {
			fornecedorController.cadastraFornecedor("", "olavo@gmail.com", "83 99348-1092");
			fail("Deveria lancar excecao.");
		} catch (IllegalArgumentException e) {
			assertEquals("Erro no cadastro do fornecedor: nome nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraFornecedorEmailNulo() {
		try {
			fornecedorController.cadastraFornecedor("Seu Olavo", null, "83 99348-1092");
			fail("Deveria lancar excecao.");
		} catch (NullPointerException e) {
			assertEquals("Erro no cadastro do fornecedor: email nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraFornecedorEmailVazio() {
		try {
			fornecedorController.cadastraFornecedor("Seu Olavo", "", "83 99348-1092");
			fail("Deveria lancar excecao.");
		} catch (IllegalArgumentException e) {
			assertEquals("Erro no cadastro do fornecedor: email nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraFornecedorTelefoneNulo() {
		try {
			fornecedorController.cadastraFornecedor("Seu Olavo", "olavo@gmail.com", null);
			fail("Deveria lancar excecao.");
		} catch (NullPointerException e) {
			assertEquals("Erro no cadastro do fornecedor: telefone nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testCadastraFornecedorTelefoneVazio() {
		try {
			fornecedorController.cadastraFornecedor("Seu Olavo", "olavo@gmail.com", "");
			fail("Deveria lancar excecao.");
		} catch (IllegalArgumentException e) {
			assertEquals("Erro no cadastro do fornecedor: telefone nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testExibeFornecedorValido() {
		fornecedorController.cadastraFornecedor("Seu Olavo", "olavo@gmail.com", "83 99348-1092");
		assertEquals("Seu Olavo - olavo@gmail.com - 83 99348-1092", fornecedorController.exibeFornecedor("Seu Olavo"));
	}
	
	@Test
	public void testExibeFornecedorNomeNulo() {
		try {
			fornecedorController.exibeFornecedor(null);
			fail("Deveria lancar excecao.");
		} catch (NullPointerException e) {
			assertEquals("Erro na exibicao do fornecedor: nome nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
	
	@Test
	public void testExibeFornecedorNomeVazio() {
		try {
			fornecedorController.exibeFornecedor("");
			fail("Deveria lancar excecao.");
		} catch (IllegalArgumentException e) {
			assertEquals("Erro na exibicao do fornecedor: nome nao pode ser vazio ou nulo.", e.getMessage());
		}
	}
}

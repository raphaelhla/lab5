package saga;

import java.util.HashMap;

public class ClienteController {

	private HashMap<String, Cliente> clientes;

	public ClienteController() {
		this.clientes = new HashMap<String, Cliente>();
	}

	public String cadastraCliente(String nome, String cpf, String email, String localizacao) {
		Validador.validaEntrada(nome, "Erro no cadastro do cliente: nome nao pode ser vazio ou nulo.");
		Validador.validaEntrada(cpf, "Erro no cadastro do cliente: cpf nao pode ser vazio ou nulo.");
		Validador.validaEntrada(email, "Erro no cadastro do cliente: email nao pode ser vazio ou nulo.");
		Validador.validaEntrada(localizacao, "Erro no cadastro do cliente: localizacao nao pode ser vazia ou nula.");
		if (!this.clientes.containsKey(cpf)) {
			this.clientes.put(cpf, new Cliente(nome, cpf, email, localizacao));
			return cpf;
		} else {
			throw new IllegalArgumentException("Erro no cadastro do cliente: cliente ja existe.");
		}
	}

	public String exibirCliente(String cpf) {
		return clientes.get(cpf).toString();
	}

	public String listarClientes() {
		String msg = "";
		int contador = 0;
		for (Cliente e : clientes.values()) {
			contador += 1;
			if (contador < clientes.size()) {
				msg += e.toString() + " | ";
			} else {
				msg += e.toString();
			}
		}
		return msg;
	}

	public void mudarNome(String cpf, String nome) {
		clientes.get(cpf).setNome(nome);
	}
	
	public void mudarEmail(String cpf, String email) {
		clientes.get(cpf).setEmail(email);
	}
	
	public void mudarLocalizacao(String cpf, String localizacao) {
		clientes.get(cpf).setLocalizacao(localizacao);
	}
	
	public void removeCliente(String cpf) {
		this.clientes.remove(cpf);
	}
}
